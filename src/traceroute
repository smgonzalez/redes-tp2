#!/usr/bin/env python2

import sys

from scapy.all import *
from PyQt4.QtCore import *
from PyQt4.QtGui import *

class RouteTable(QTableWidget):

	def __init__(self, parent=None):
		super(RouteTable, self).__init__(parent)

	def onEchoRequest(self, ttl, ans):
		print str(ttl) + " - \t" + str(ans.src) + " \techo-request"


class Tracer(QWidget):

	echoReply = pyqtSignal(int, IP, name="echoReply")
	echoRequest = pyqtSignal(int, IP, name="echoRequest")


	def __init__(self, parent=None):
		super(Tracer, self).__init__(parent)

		self.layout = QVBoxLayout()

		self.routeTable = RouteTable()

		self.hostname_layout = QHBoxLayout()
		self.hostname_label = QLabel("Host: ")
		self.hostname_edit = QLineEdit()
		self.trace_button = QPushButton("Trace")

		self.hostname_layout.addWidget(self.hostname_label)
		self.hostname_layout.addWidget(self.hostname_edit)
		self.hostname_layout.addWidget(self.trace_button)

		self.layout.addItem(self.hostname_layout)
		self.layout.addWidget(self.routeTable)
		self.setLayout(self.layout)

		self.trace_button.clicked.connect(self.trace)
		self.hostname_edit.returnPressed.connect(self.trace)

	def trace(self):
		for ttl in range(1, 255):
			packet = IP(dst=str(self.hostname_edit.text()), ttl=ttl) / ICMP()
			ans = sr1(packet, verbose=0, timeout=1)

#			if ans and ans.type == 0:
#				print str(ttl) + " - \t" + str(ans.src) + " \techo-reply"
#				self.echoReply.emit(ttl, ans)
#				break
#			elif ans and ans.type == 11:
#				print str(ttl) + " - \t" + str(ans.src) + " \techo-request"
#				self.echoRequest.emit(ttl, ans)
#			else:
#				print str(ttl) + " - \t* * *"

def main(argv=sys.argv):
	app = QApplication(argv)
	tracer = Tracer()
	tracer.show()
	app.exec_()

if __name__=='__main__':
	main()
